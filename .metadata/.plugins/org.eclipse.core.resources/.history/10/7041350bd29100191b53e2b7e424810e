package fr.happn.poi.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import fr.happn.poi.model.Poi;
import fr.happn.poi.model.PoiRound;
import fr.happn.poi.model.Result;

@Component
public class PoiServiceImpl implements PoiService {
	
    private static final Logger logger = LogManager.getLogger(PoiServiceImpl.class);

	@Override
	public List<Poi> parsePoi(MultipartFile multipart) {

		BufferedReader br;
		List<Poi> result = new ArrayList<>();
		try {
			String line;
			boolean isFirstLine = true;
			InputStream is = multipart.getInputStream();
			br = new BufferedReader(new InputStreamReader(is));
			br.skip(1);
			while ((line = br.readLine()) != null) {
				if(isFirstLine) {
					isFirstLine = false;
					continue;
				}
				String[] split = line.split(" ");
				Poi poi = new Poi(split[0], Float.parseFloat(split[1]), Float.parseFloat(split[2]));
				result.add(poi);
			}
		} catch (IOException e) {
			logger.error(e.getMessage());
		}
		return result;
	}

	@Override
	public Result calculPoisByZone(float minLat, float maxLat, float minLon, float maxLon, List<Poi> listPois) {
		
		List<Poi> poisByZone = new ArrayList<>();
		for(Poi poi : listPois) {
			if(poi.getLat() > minLat && poi.getLat() < maxLat && poi.getLon() > minLon && poi.getLon() < maxLon) {
				poisByZone.add(poi);
			}
		}
		return new Result(poisByZone, poisByZone.size());
	}

	@Override
	public Result getMostFilledAreas(int nbZones, List<Poi> listPois) {
		
		List<PoiRound> listPoiRounded = new ArrayList<>();
		for(Poi poi : listPois) {
			int intPart = (int)poi.getLat();
			float latRounded = intPart + this.roundLowHalf(this.getDecimalValue(poi.getLat()));
			float lonRounded = (int)poi.getLon() + this.roundLowHalf(this.getDecimalValue(poi.getLon()));
			PoiRound poiRound = new PoiRound();
			poiRound.setPoi(new Poi(latRounded, lonRounded));
			poiRound.setLatRound(latRounded != poi.getLat()?true:false);
			poiRound.setLonRound(lonRounded != poi.getLon()?true:false);
			
			listPoiRounded.add(poiRound);
		}
		for(PoiRound poiRound : listPoiRounded) {
			System.out.println(poiRound.toString());
		}
		Map<String, Integer> test = this.countAreasFilled(listPoiRounded);
		test.forEach((k,v)->System.out.println("Key : " + k + " Value : " + v));
		return null;
	}
	
	private float roundLowHalf(float value) {
		value = value < 0?value<-0.5f?-1f:-0.5f:value<0.5?0f:0.5f;
		NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);
		DecimalFormat df = (DecimalFormat)nf;
		df.setMaximumFractionDigits(1);
		return Float.valueOf(df.format(value));
	}
	
	private float getDecimalValue(float value) {
		value = value - (int)value;
		NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);
		DecimalFormat df = (DecimalFormat)nf;
		df.setMaximumFractionDigits(1);
		return Float.valueOf(df.format(value));
	}
	
	private Map<String, Integer> countAreasFilled(List<PoiRound> listPoiRound){
		
		Map<String, Integer> mapCountAreasFilled = new HashMap<>();
		for(PoiRound poiRound : listPoiRound) {
			if(poiRound.isLatRound() && poiRound.isLonRound()) {
				float latMin = poiRound.getPoi().getLat();
				float latMax = latMin+0.5f;
				float lonMin = poiRound.getPoi().getLon();
				float lonMax = lonMin+0.5f;
				System.out.println("OK " +latMin+":"+latMax+";"+lonMin+":"+lonMax);

				mapCountAreasFilled.put(latMin+":"+latMax+";"+lonMin+":"+lonMax, 
						mapCountAreasFilled.get(latMin+":"+latMax+";"+lonMin+":"+lonMax) != null?mapCountAreasFilled.get(latMin+":"+latMax+";"+lonMin+":"+lonMax)+1:1);

			}
			else if(!poiRound.isLatRound() && poiRound.isLonRound()){
				float latMiddle = poiRound.getPoi().getLat();
				float latMin = latMiddle-0.5f;
				float latMax = latMiddle+0.5f;
				float lonMin = poiRound.getPoi().getLon();
				float lonMax = lonMin+0.5f;
				System.out.println("OK LAT NOT ROUND1" +latMin+":"+latMiddle+";"+lonMin+":"+lonMax);
				System.out.println("OK LAT NOT ROUND2" +latMiddle+":"+latMax+";"+lonMin+":"+lonMax);
				
				mapCountAreasFilled.put(latMin+":"+latMiddle+";"+lonMin+":"+lonMax, 
						mapCountAreasFilled.get(latMin+":"+latMiddle+";"+lonMin+":"+lonMax) != null?mapCountAreasFilled.get(latMin+":"+latMiddle+";"+lonMin+":"+lonMax)+1:1);
				mapCountAreasFilled.put(latMiddle+":"+latMax+";"+lonMin+":"+lonMax, 
						mapCountAreasFilled.get(latMiddle+":"+latMax+";"+lonMin+":"+lonMax) != null?mapCountAreasFilled.get(latMiddle+":"+latMax+";"+lonMin+":"+lonMax)+1:1);
				
			}
			else if(poiRound.isLatRound() && !poiRound.isLonRound()) {
				float latMin = poiRound.getPoi().getLat();
				float latMax = latMin+0.5f;
				float lonMiddle = poiRound.getPoi().getLon();
				float lonMin = lonMiddle - 0.5f;
				float lonMax = lonMiddle + 0.5f;
				
				mapCountAreasFilled.put(latMin+":"+latMax+";"+lonMin+":"+lonMiddle, 
					mapCountAreasFilled.get(latMin+":"+latMax+";"+lonMin+":"+lonMiddle) != null?mapCountAreasFilled.get(latMin+":"+latMax+";"+lonMin+":"+lonMiddle)+1:1);
			mapCountAreasFilled.put(latMin+":"+latMax+";"+lonMiddle+":"+lonMax, 
					mapCountAreasFilled.get(latMin+":"+latMax+";"+lonMiddle+":"+lonMax) != null?mapCountAreasFilled.get(latMin+":"+latMax+";"+lonMiddle+":"+lonMax)+1:1);
				
			}
			else {
				float latMiddle = poiRound.getPoi().getLat();
				float latMin = latMiddle-0.5f;
				float latMax = latMiddle+0.5f;
				float lonMiddle = poiRound.getPoi().getLon();
				float lonMin = lonMiddle - 0.5f;
				float lonMax = lonMiddle + 0.5f;
				System.out.println("OK LAT NOT ROUND4 1 " + "latMin : "+ latMin+" latmiddle : "+latMiddle+" latMax : "+latMax+" lonMin : "+lonMin + " lonMiddle : " + lonMiddle + " lonMax : "  + lonMax);
				mapCountAreasFilled.put(latMin+":"+latMiddle+";"+lonMiddle+":"+lonMax, 
						mapCountAreasFilled.get(latMin+":"+latMiddle+";"+lonMiddle+":"+lonMax) != null?mapCountAreasFilled.get(latMin+":"+latMiddle+";"+lonMiddle+":"+lonMax)+1:1);
				mapCountAreasFilled.put(latMiddle+":"+latMax+";"+lonMiddle+":"+lonMax, 
						mapCountAreasFilled.get(latMiddle+":"+latMax+";"+lonMiddle+":"+lonMax) != null?mapCountAreasFilled.get(latMiddle+":"+latMax+";"+lonMiddle+":"+lonMax)+1:1);
				
				mapCountAreasFilled.put(latMiddle+":"+latMax+";"+lonMin+":"+lonMiddle, 
						mapCountAreasFilled.get(latMiddle+":"+latMax+";"+lonMin+":"+lonMiddle) != null?mapCountAreasFilled.get(latMiddle+":"+latMax+";"+lonMin+":"+lonMiddle)+1:1);
				mapCountAreasFilled.put(latMiddle+":"+latMax+";"+lonMiddle+":"+lonMax, 
						mapCountAreasFilled.get(latMiddle+":"+latMax+";"+lonMiddle+":"+lonMax) != null?mapCountAreasFilled.get(latMiddle+":"+latMax+";"+lonMiddle+":"+lonMax)+1:1);
			}
		}
		return mapCountAreasFilled;
	}
	


}
