package fr.happn.poi.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import fr.happn.poi.model.Poi;
import fr.happn.poi.model.Result;

@Component
public class PoiServiceImpl implements PoiService {
	
    private static final Logger logger = LogManager.getLogger(PoiServiceImpl.class);

	@Override
	public List<Poi> parsePoi(MultipartFile multipart) {

		BufferedReader br;
		List<Poi> result = new ArrayList<>();
		try {
			String line;
			boolean isFirstLine = true;
			InputStream is = multipart.getInputStream();
			br = new BufferedReader(new InputStreamReader(is));
			br.skip(1);
			while ((line = br.readLine()) != null) {
				if(isFirstLine) {
					isFirstLine = false;
					continue;
				}
				String[] split = line.split(" ");
				Poi poi = new Poi(split[0], Float.parseFloat(split[1]), Float.parseFloat(split[2]));
				result.add(poi);
			}
		} catch (IOException e) {
			logger.error(e.getMessage());
		}
		return result;
	}

	@Override
	public Result calculPoisByZone(float minLat, float maxLat, float minLon, float maxLon, List<Poi> listPois) {
		
		List<Poi> poisByZone = new ArrayList<>();
		for(Poi poi : listPois) {
			if(poi.getLat() > minLat && poi.getLat() < maxLat && poi.getLon() > minLon && poi.getLon() < maxLon) {
				poisByZone.add(poi);
			}
		}
		return new Result(poisByZone, poisByZone.size());
	}

	@Override
	public Result getMostFilledAreas(int nbZones, List<Poi> listPois) {
		
		List<String> listPoisRounded = new ArrayList<String>();
		
		for(Poi poi : listPois) {
			int intPart = (int)poi.getLat();
			System.out.println("lat rounded base " + intPart);
			float latRounded = intPart + this.roundLowHalf(this.getDecimalValue(poi.getLat()));
			System.out.println("lat rounded base 2" + latRounded);
			float lonRounded = (int)poi.getLon() + this.roundLowHalf(this.getDecimalValue(poi.getLon()));
			listPoisRounded.add(latRounded+":"+lonRounded);
		}
		for(String s : listPoisRounded) {
			System.out.println(s);
		}
		return null;
	}
	
	private float roundLowHalf(float value) {
		float  valuetest = Math.abs(value);
		float val1 = value-(1-(1-value));
		System.out.println("Val1" + val1);
		float val2 = value-(value-0.5f);
		System.out.println("val2 " + val2);
		valuetest = valuetest<0.5?(valuetest-(1-(1-valuetest))):valuetest-(valuetest-0.5f);
		NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);
		DecimalFormat df = (DecimalFormat)nf;
		valuetest = Float.valueOf(df.format(value));
		return value<0?-valuetest:valuetest;
	}
	
	private float getDecimalValue(float value) {
		float  valuetest = Math.abs(value);
		valuetest = valuetest - (int)valuetest;
		NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);
		DecimalFormat df = (DecimalFormat)nf;
		valuetest = Float.valueOf(df.format(valuetest));
        System.out.print("OOOOH " +valuetest +  " c'est chelouu");
		return value<0?-valuetest:valuetest;
	}
	


}
